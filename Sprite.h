//=====================================================================//
//		スプライト処理 [sprite.h]                                      //
//                                                                     //
//                                               GP51A247 SoSei        //
//                                               2018/07/05            //
//---------------------------------------------------------------------//
//                                                                     //
//=====================================================================//
#ifndef SPRITE_H
#define SPRITE_H
#include <Windows.h>
#include <d3dx9.h>
#include <vector>

/**************************************************

			レンダリング用enum

**************************************************/
enum e_RENDERSTATE
{
	RENDER_DEFAULT,		// デフォルト(不透明)
	RENDER_ALPHATEST,	// αテスト
	RENDER_HALFADD,		// 半加算合成
	RENDER_ADD			// 加算合成
};

/**************************************************

			アニメーション用uv座標

**************************************************/
struct AnimationNum {
	unsigned int numU; 	// U座標
	unsigned int numV;	// V座標
};
/**************************************************

			ポリゴン頂点座標系

**************************************************/
typedef struct S_SpriteVertex_tag {
	float x, y, z;		// 3次元座標
	float rhw;			// 2D変換済みフラグ
	DWORD color;		// 頂点色
	float u, v;			// UV座標
}S_SpriteVertex;
/**************************************************

中心座標とサイズ

**************************************************/
typedef struct S_Vec_tag {
	D3DXVECTOR2 pos;
	float width;
	float height;
}S_Vec;
/**************************************************

UVに関するもの

**************************************************/
typedef struct S_UV_tag {
	/* --------------------------------
	UVの分割数
	-------------------------------- */
	int divU;
	int divV;

	/* --------------------------------
	UVの番号
	-------------------------------- */
	float numU;
	float numV;
}S_UV;


/**************************************************

プロトタイプ宣言

**************************************************/
//**********          レンダーステートの変更          **********//
void SetRenderState(IDirect3DDevice9* pD3DDevice, e_RENDERSTATE RenderState);

/**************************************************

			ポリゴン描画用クラス　スプライト

**************************************************/
class Sprite
{
private:
	/* --------------------------------
	FVFフラグ
	-------------------------------- */
	static const DWORD SPRITE_FVF = D3DFVF_XYZRHW | D3DFVF_DIFFUSE | D3DFVF_TEX1;

	/* --------------------------------
	頂点座標系
	-------------------------------- */
	S_SpriteVertex m_spriteVertex;

	/* --------------------------------
	回転値（ラジアン）
	-------------------------------- */
	float m_rotate;

	/* --------------------------------
	スプライト位置とサイズ
	-------------------------------- */
	S_Vec m_pos;
	/* --------------------------------
	UV分数とUV現在バ番号
	-------------------------------- */
	S_UV m_uv;

public:
	Sprite();	// コンストラクタ
	~Sprite();	// デストラクタ


	//**********          クラス内部関数宣言           **********//

	/* --------------------------------
	ポリゴン頂点位置 サイズ設定
	-------------------------------- */
	void SetPos(D3DXVECTOR2 vec, int Width, int Height);
	S_Vec GetPos(void);


	/* --------------------------------
	回転用計算関数
	-------------------------------- */
	void SetRotate(float Rotate);
	/* --------------------------------
	ポリゴンαセット
	-------------------------------- */
	void SetAlpha(int alpha);
	/* --------------------------------
	UV分割数セット
	UV開始座標セット
	-------------------------------- */
	void SetDivide(int DivU, int DivV);
	void SetUVNum(float NumU, float NumV);
	S_UV GetUV(void);
	
	/* --------------------------------
	描画関数（回転なし）　（デバイス、　テキスチャー、　向き・FALSEは右TRUEは左）
	-------------------------------- */
	void Draw(IDirect3DDevice9* pDevice3D, IDirect3DTexture9* pTexture, bool isTurn = false);
	/* --------------------------------
	描画関数（回転あり）
	-------------------------------- */
	void Draw(IDirect3DDevice9* pDevice3D, IDirect3DTexture9* pTexture, bool isTurn, float xo, float yo);
};

#endif